name: PR

on:
  merge_group:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  visual-regression-ios:
    runs-on: macos-14

    steps:
      - name: üèó Clone repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # - name: Get Runner Information
      #   run: /usr/bin/xcodebuild -version

      # - name: Get yarn cache directory path
      #   id: yarn-cache-dir-path
      #   run: echo "::set-output name=dir::$(yarn cache dir)"

      # - uses: actions/cache@v2
      #   id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      #   with:
      #     path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #     key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-yarn-

      - uses: ./.github/actions/setup-tools

      # - name: Install CocoaPods
      #   run: gem install cocoapods -v 1.15.2

      # - uses: actions/cache@v2
      #   with:
      #     path: ./ios/Pods
      #     key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pods-

      # - name: Expo prebuild
      #   run: yarn expo prebuild --platform ios
      #   working-directory: ./projects/app

      - uses: futureware-tech/simulator-action@v3
        with:
          model: "iPhone 15 Pro"
          os_version: ">=18.0"

      - name: Run Expo Go
        run: |
          echo 1
          yarn --version
          echo 2
          yarn expo start --ios --no-dev 2>&1 | tee expo.log &
          echo 3
          echo $! > expo.pid
          echo 4
          # Wait up to 10 minutes for the iOS Bundled message to appear in the log
          timeout 600 sh -c 'until grep "iOS Bundled" expo.log; do sleep 1; done'
          echo 5
        working-directory: ./projects/app
        env:
          EXPO_DEBUG: 1
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Take a screenshot
        run: xcrun simctl io booted screenshot ./screenshot.png
        working-directory: ./projects/app

      # - name: Upload to Percy
      #   run: npx @percy/cli upload .owl/latest
      #   working-directory: ./projects/app

      - name: Store screenshots and report as artifacts
        uses: actions/upload-artifact@v4
        # if: failure()
        with:
          name: screenshot
          path: ./projects/app/screenshot.png

  # app-preview:
  #   runs-on: ubuntu-latest
  #   env:
  #     # Format: 'github_test_pr_' <run_id> [ ':' <run_attempt> ]
  #     #
  #     # The run attempt is only included for re-runs to keep the branch name
  #     # slightly shorter and cleaner when there is no re-run.
  #     NEON_BRANCH_NAME: github_test_pr_${{ github.run_id }}${{ github.run_attempt != '1' && format(':{0}', github.run_attempt) || '' }}
  #     NEON_DATABASE_NAME: hao
  #   steps:
  #     - name: üèó Clone repo
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: üèó Create database branch for running tests
  #       uses: neondatabase/create-branch-action@v5
  #       id: create-neon-branch
  #       with:
  #         api_key: ${{ secrets.NEON_API_KEY }}
  #         branch_name: ${{ env.NEON_BRANCH_NAME }}
  #         database: ${{ env.NEON_DATABASE_NAME }}
  #         project_id: ${{ secrets.NEON_PROJECT_ID }}
  #         username: ${{ secrets.NEON_USERNAME }}

  #     - uses: ./.github/actions/setup-tools

  #     - run: moon run app:dbMigrate --color --affected --remote
  #       env:
  #         DATABASE_URL: ${{ steps.create-neon-branch.outputs.db_url }}

  #     - name: üöÄ Deploy to Vercel (preview)
  #       run: moon run app:deployVercel --color --affected --remote
  #       env:
  #         EXPO_PUBLIC_REPLICACHE_LICENSE_KEY: ${{ secrets.EXPO_PUBLIC_REPLICACHE_LICENSE_KEY }}
  #         HHH_VERCEL_PREVIEW:
  #         SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  #         VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  #         VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_APP }}
  #         VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

  #     - uses: neondatabase/delete-branch-action@v3
  #       with:
  #         project_id: ${{ secrets.NEON_PROJECT_ID }}
  #         branch: ${{ env.NEON_BRANCH_NAME }}
  #         api_key: ${{ secrets.NEON_API_KEY }}
  #       if: ${{ always() }}

  # static-preview:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: üèó Clone repo
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - uses: ./.github/actions/setup-tools

  #     - name: üöÄ Deploy to Vercel (preview)
  #       run: moon run static:deploy --color --affected --remote
  #       env:
  #         HHH_VERCEL_PREVIEW:
  #         VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  #         VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_STATIC }}
  #         VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

  # moon-ci:
  #   runs-on: ubuntu-latest
  #   env:
  #     VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  #     VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_STATIC }}
  #   strategy:
  #     matrix:
  #       index: [0, 1]
  #   steps:
  #     - name: üèó Clone repo
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - uses: ./.github/actions/setup-tools

  #     - run: moon ci --color --job ${{ matrix.index }} --jobTotal 2

  #     - name: üßæ Results
  #       uses: appthrust/moon-ci-retrospect@v1
  #       if: ${{ always() }}

name: PR

on:
  merge_group:
  pull_request:

jobs:
  moon-ci:
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Clone repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Install dependencies
        uses: moonrepo/setup-toolchain@v0.3.1
        with:
          auto-install: true

      - run: moon ci
        env:
          CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}

  database:
    runs-on: ubuntu-latest
    env:
      # Format: 'github_test_pr_' <run_id> [ ':' <run_attempt> ]
      #
      # The run attempt is only included for re-runs to keep the branch name
      # slightly shorter and cleaner when there is no re-run.
      NEON_BRANCH_NAME: github_test_pr_${{ github.run_id }}${{ github.run_attempt != '1' && format(':{0}', github.run_attempt) || '' }}
      NEON_DATABASE_NAME: hao
    steps:
      - name: 🏗 Clone repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗 Create database branch for running tests
        uses: neondatabase/create-branch-action@v5
        id: create-branch
        with:
          api_key: ${{ secrets.NEON_API_KEY }}
          branch_name: ${{ env.NEON_BRANCH_NAME }}
          database: ${{ env.NEON_DATABASE_NAME }}
          project_id: ${{ secrets.NEON_PROJECT_ID }}
          username: ${{ secrets.NEON_USERNAME }}

      - name: 📦 Install dependencies
        uses: moonrepo/setup-toolchain@v0.3.1
        with:
          auto-install: true

      - name: 🚀 Migrate test database
        run: moon run api:dbMigrate
        env:
          DATABASE_URL: ${{ steps.create-branch.outputs.db_url }}

      - name: 🗑️ Delete database branch
        uses: neondatabase/delete-branch-action@v3
        with:
          project_id: ${{ secrets.NEON_PROJECT_ID }}
          branch: ${{ env.NEON_BRANCH_NAME }}
          api_key: ${{ secrets.NEON_API_KEY }}
        if: ${{ always() }}

  api-vercel:
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_API }}
    steps:
      - name: 🏗 Clone repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Install dependencies
        uses: moonrepo/setup-toolchain@v0.3.1
        with:
          auto-install: true

      - name: 🔑 Fetch Vercel secrets
        run: moon run api:vercel -- pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Build Project Artifacts
        run: moon run api:vercel -- build --token=${{ secrets.VERCEL_TOKEN }}

      # - name: 🚀 Deploy Project Artifacts to Vercel
      #   run: moon run api:vercel -- deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  app-vercel:
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_APP }}
    steps:
      - name: 🏗 Clone repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Install dependencies
        uses: moonrepo/setup-toolchain@v0.3.1
        with:
          auto-install: true

      - name: 🔑 Fetch Vercel secrets
        run: moon run app:vercel -- pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Build Project Artifacts
        run: moon run app:vercel -- build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          EXPO_PUBLIC_REPLICACHE_LICENSE_KEY: ${{ secrets.EXPO_PUBLIC_REPLICACHE_LICENSE_KEY }}

      # - name: 🚀 Deploy Project Artifacts to Vercel
      #   run: moon run app:vercel -- deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  static-vercel:
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_STATIC }}
    steps:
      - name: 🏗 Clone repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Install dependencies
        uses: moonrepo/setup-toolchain@v0.3.1
        with:
          auto-install: true

      - name: 🔑 Fetch Vercel secrets
        run: moon run static:vercel -- pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Build Project Artifacts
        run: moon run static:vercel -- build --token=${{ secrets.VERCEL_TOKEN }}

      # - name: 🚀 Deploy Project Artifacts to Vercel
      #   run: moon run static:vercel -- deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

diff --git a/lib/dictionary.js b/lib/dictionary.js
index 747ce832fe5e95d299d7a77db324e6c72b4ba857..9ea307a025b6a095df7032992144e18d911b250a 100644
--- a/lib/dictionary.js
+++ b/lib/dictionary.js
@@ -179,11 +179,13 @@ function getExamples(character) {
     var wordtrad = potentialexamples[i][0].traditional;
 
     var totalfrequency = 0;
-    if ('undefined' != typeof wordfreq[wordsimp]) {
-      totalfrequency = totalfrequency + parseInt(wordfreq[wordsimp]);
+    const wordsimpFreq = wordfreq.get(wordsimp);
+    if ('undefined' != typeof wordsimpFreq) {
+      totalfrequency = totalfrequency + parseInt(wordsimpFreq);
     }
-    if ('undefined' != typeof wordfreq[wordtrad]) {
-      totalfrequency = totalfrequency + parseInt(wordfreq[wordtrad]);
+    const wordtradFreq = wordfreq.get(wordtrad);
+    if ('undefined' != typeof wordtradFreq) {
+      totalfrequency = totalfrequency + parseInt(wordtradFreq);
     }
     allfreq.push(totalfrequency);
   }
@@ -212,22 +214,21 @@ function getExamples(character) {
     for (; i < potentialexamples.length; i++) {
       var word = potentialexamples[i][0];
 
-      if ('undefined' != typeof wordfreq[word.simplified]) {
-        pushFrequency(word);
-      }
+      pushFrequency(word);
     }
 
     function pushFrequency(word) {
-      if (wordfreq[word.simplified] < lowrange) {
+      const freq = wordfreq.get(word.simplified);
+      if (freq === undefined) {
+        return;
+      }
+      if (freq < lowrange) {
         lowfreq.push(word);
       }
-      if (
-        wordfreq[word.simplified] >= midrange[1] &&
-        wordfreq[word.simplified] < midrange[0]
-      ) {
+      if (freq >= midrange[1] && freq < midrange[0]) {
         midfreq.push(word);
       }
-      if (wordfreq[word.simplified] >= highrange) {
+      if (freq >= highrange) {
         highfreq.push(word);
       }
     }
@@ -266,9 +267,9 @@ function determineIfSimplified(character) {
   }
 }
 
-var charfreq = {};
+var charfreq = new Map();
 var characterFrequencyCountIndex = [];
-var wordfreq = {};
+var wordfreq = new Map();
 function loadFrequencyData() {
   console.log('Starting to read frequency data');
 
@@ -280,7 +281,7 @@ function loadFrequencyData() {
     var splits = lines[i].split(',');
     var word = splits[0];
     var freq = splits[1];
-    wordfreq[word] = freq;
+    wordfreq.set(word, freq);
   }
 
   var readFile = data.loadFrequencyWithScriptVariantsRemoved();
@@ -291,14 +292,14 @@ function loadFrequencyData() {
     var number = splits[0];
     var character = splits[1];
 
-    charfreq[character] = {
+    charfreq.set(character, {
       number: number,
       character: character,
       count: splits[2],
       percentage: splits[3],
       pinyin: splits[4],
       meaning: splits[5]
-    };
+    });
 
     characterFrequencyCountIndex[number] = character;
   }
@@ -339,8 +340,9 @@ function getPinyin(character) {
     return [irregularphonetics[character]];
   }
   if (
-    character.search(/[㇐㇇㇚𤴓𠂇㇒㇑⺊阝㇟⺀㇓㇝𪜋⺁𠮛㇔龶㇃丆㇏⺌⺹⺆㇛㇠㇆⺧⺮龸⺈㇗龴㇕㇈㇖⺤㇎⺺䧹㇂㇉⺪㇀]/g) !=
-    -1
+    character.search(
+      /[㇐㇇㇚𤴓𠂇㇒㇑⺊阝㇟⺀㇓㇝𪜋⺁𠮛㇔龶㇃丆㇏⺌⺹⺆㇛㇠㇆⺧⺮龸⺈㇗龴㇕㇈㇖⺤㇎⺺䧹㇂㇉⺪㇀]/g
+    ) != -1
   ) {
     return ['_stroke'];
   }
@@ -453,25 +455,27 @@ function getCharacterFrequency(character) {
 
   // Check if this character has a lookup
   if (dictEntry && dictEntry[0]) {
+    const simplifiedFreq = charfreq.get(dictEntry[0].simplified);
     //Check if we can return a simplified version
-    if ('undefined' != typeof charfreq[dictEntry[0].simplified]) {
-      return charfreq[dictEntry[0].simplified];
+    if ('undefined' != typeof simplifiedFreq) {
+      return simplifiedFreq;
     } else {
+      const characterFreq = charfreq.get(character);
       // If not, then this is could be a traditional character
       // that possibly exists in the frequency list
-      if ('undefined' != typeof charfreq[character]) {
-        return charfreq[character];
+      if ('undefined' != typeof characterFreq) {
+        return characterFreq;
       } else {
         // If not, this is a very uncommon character
         return 'Character not found';
       }
 
-      return charfreq[character];
+      return charfreq.get(character);
     }
-  } else if ('undefined' != typeof charfreq[character]) {
+  } else if ('undefined' != typeof charfreq.get(character)) {
     // In the unlikely case that we don't have a dictionary entry
     // but it exists in the frequency list
-    return charfreq[character];
+    return charfreq.get(character);
   } else {
     return 'Character not found';
   }
